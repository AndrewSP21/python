# 1. Реализовать класс «Дата», функция-конструктор которого должна принимать дату в виде строки формата
# «день-месяц-год». В рамках класса реализовать два метода. Первый, с декоратором @classmethod, должен извлекать
# число, месяц, год и преобразовывать их тип к типу «Число». Второй, с декоратором @staticmethod, должен проводить
# валидацию числа, месяца и года (например, месяц — от 1 до 12). Проверить работу полученной структуры на реальных
# данных.

class Date:
    def __init__(self, data: str):
        self.data = data.split('-')

    @classmethod
    def to_type(cls, date_str: str) -> str:
        try:
            day, month, year = [int(i) for i in date_str.split('-')]
            return f"{type(day), day} {type(month), month} {type(year), year}"
        except ValueError:
            return 'Указана неправильная дата!'

    @staticmethod
    def is_valid(date_str: str) -> str:
        try:
            day, month, year = [int(i) for i in date_str.split('-')]
            valid_text = Date.__validate(day, month, year)
            if valid_text is None:
                return 'Ok'
            return valid_text
        except ValueError:
            return 'Указана неправильная дата!'

    @classmethod
    def __validate(cls, day: int, month: int, year: int) -> str:
        print(f'{day} {month} {year}')
        if day > 31 or day < 1:
            return f'Error day {day} is not valid'
        if month > 12 or month < 1:
            return f'Error month {month} is not valid.'
        return None


print(Date.is_valid('25-12-2021'))
print(Date.is_valid('32-12-2021'))
print(Date.is_valid('30-22-2021'))
print(Date.to_type('33-12-2021'))


# 2. Создайте собственный класс-исключение, обрабатывающий ситуацию деления на нуль. Проверьте его работу на данных,
# вводимых пользователем. При вводе пользователем нуля в качестве делителя программа должна корректно обработать эту
# ситуацию и не завершиться с ошибкой.
class DivideException(BaseException):
    def __init__(self, txt):
        self.txt = txt


try:
    user_num_1 = int(input('Введите делимое: '))
    user_num_2 = int(input('Введите делитель: '))
    if user_num_2 == 0:
        raise DivideException("Делить на ноль нельзя!")
    else:
        res = user_num_1 / user_num_2
except ValueError:
    print("Вы ввели не число")
except DivideException:
    print('DivideException: деление на 0')

# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список
# только числами. Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит
# работу скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список с числами
# выводится на экран. Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить
# соответствующее сообщение. При этом работа скрипта не должна завершаться.

# 4. Начните работу над проектом «Склад оргтехники». Создайте класс, описывающий склад. А также класс «Оргтехника»,
# который будет базовым для классов-наследников. Эти классы — конкретные типы оргтехники (принтер, сканер,
# ксерокс). В базовом классе определить параметры, общие для приведенных типов. В классах-наследниках реализовать
# параметры, уникальные для каждого типа оргтехники.

# 5. Продолжить работу над первым заданием. Разработать методы, отвечающие за приём оргтехники на склад и передачу в
# определенное подразделение компании. Для хранения данных о наименовании и количестве единиц оргтехники,
# а также других данных, можно использовать любую подходящую структуру, например словарь.

# 6. Продолжить работу над вторым заданием. Реализуйте механизм валидации вводимых пользователем данных. Например,
# для указания количества принтеров, отправленных на склад, нельзя использовать строковый тип данных.
#
# Подсказка: постарайтесь по возможности реализовать в проекте «Склад оргтехники» максимум возможностей, изученных на
# уроках по ООП.

# 7. Реализовать проект «Операции с комплексными числами». Создайте класс «Комплексное число», реализуйте перегрузку
# методов сложения и умножения комплексных чисел. Проверьте работу проекта, создав экземпляры класса (комплексные
# числа) и выполнив сложение и умножение созданных экземпляров. Проверьте корректность полученного результата.
